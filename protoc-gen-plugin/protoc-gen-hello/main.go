package main

import (
	"fmt"
	"github.com/dave/jennifer/jen"
	proto_gen_lib "github.com/pubgo/gotests/proto-gen-lib"
	"github.com/pubgo/xerror"
	"log"
)

const (
	rpcPkgPath = "net/rpc"
)

func clientMethod(srv string, m *proto_gen_lib.Method) *jen.Statement {
	reqArg := "in *" + m.GetInputType()
	if m.GetClientStreaming() {
		reqArg = ""
	}

	respName := "*" + m.GetOutputType()
	if m.GetServerStreaming() || m.GetClientStreaming() {
		respName = srv + "_" + m.GetName() + "Service"
	}

	var codes = []jen.Code{jen.Id("ctx context.Context")}
	if reqArg != "" {
		codes = append(codes, jen.Id(reqArg))
	}
	codes = append(codes, jen.Id("opts ...client.CallOption"))

	return jen.Id(m.GetName()).
		Params(
			codes...).
		Params(
			jen.Id(respName),
			jen.Error())
}

func serviceClient(srv string, m *proto_gen_lib.Method, j *jen.File) {
	//var srv1 = strings.ToLower(srv[:1]) + srv[1:]
	var srvS = srv + "Service"

	mp := proto_gen_lib.M{
		"srv":     srv,
		"mthName": m.GetName(),
		"outType": m.GetOutputType(),
		"inType":  m.GetInputType(),
	}

	j.Func().Params(jen.Id("c *" + srvS)).Add(clientMethod(srv, m)).BlockFunc(func(group *jen.Group) {
		if !m.GetServerStreaming() && !m.GetClientStreaming() {
			group.Id(proto_gen_lib.Template(`
			req := c.c.NewRequest(c.name, "${srv}.${mthName}", in)
			out := new(${outType})
			err := c.c.Call(ctx, req, out, opts...)
			if err != nil {
				return nil, err
			}
			return out, nil
`, mp))

		} else {
			group.Id(proto_gen_lib.Template(`
			req := c.c.NewRequest(c.name, "${srv}.${mthName}", &${inType}{})
			stream, err := c.c.Stream(ctx, req, opts...)
			if err != nil { return nil, err }
`, mp))

			if !m.GetClientStreaming() {
				group.Id("if err := stream.Send(in); err != nil { return nil, err }")
			}
			group.Id(fmt.Sprintf("return &%s{stream}, nil", srv+m.GetName()))
		}

	})
}

func main() {
	defer xerror.Resp(func(err xerror.XErr) {
		log.Println(err.Println())
	})

	hello := proto_gen_lib.New("hello")
	hello.Parameter(func(key, value string) {
		log.Println(key, "sbhbhbsh", value)
	})

	xerror.Panic(hello.FileDescriptor(func(ss *proto_gen_lib.Service) {
		j := ss.J
		srv := ss.Name
		fd := ss
		_ = srv

		j.PackageComment("// Code generated by protoc-gen-micro. DO NOT EDIT.")
		if !fd.GetOptions().GetDeprecated() {
			j.PackageComment("// source: " + fd.GetName())
		} else {
			j.PackageComment("// " + fd.GetName() + " is a deprecated file.")
		}

		j.Id(
			`
    import (
    	fmt "fmt"
    	math "math"
    	context "context"

        client "github.com/asim/go-micro/v3/client"
    	server "github.com/asim/go-micro/v3/server"
    	_ "github.com/gogo/protobuf/gogoproto"
    	proto "github.com/golang/protobuf/proto"
    	_ "google.golang.org/genproto/googleapis/api/annotations"
    )

    // Reference imports to suppress errors if they are not otherwise used.
    var _ = proto.Marshal
    var _ = fmt.Errorf
    var _ = math.Inf

    // This is a compile-time assertion to ensure that this generated file
    // is compatible with the proto package it is being compiled against.
    // A compilation error at this line likely means your copy of the
    // proto package needs to be updated.
    const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

    // Reference imports to suppress errors if they are not otherwise used.
    var _ context.Context
    var _ client.Option
    var _ server.Option
`)

		j.Type().Id(srv).InterfaceFunc(func(group *jen.Group) {
			for _, m := range ss.GetMethod() {
				group.Add(clientMethod(srv, m))
			}
		})

		//j.Type().Id(srv).InterfaceFunc(func(group *jen.Group) {
		//	for _, m := range ss.GetMethod() {
		//		mthName := proto_gen_lib.CamelCase(m.GetName())
		//		group.Id(mthName).Params(
		//			jen.Id("in *"+ss.TypeName(m.GetInputType())),
		//			jen.Id("out *"+ss.TypeName(m.GetOutputType())),
		//		).Error()
		//	}
		//})

		// method
		////srv *rpc.Server, x TestApiInterface
		//j.Func().Id("Register"+srv).Params(
		//	jen.Id("srv *").Qual(rpcPkgPath, "Server"),
		//	jen.Id("x "+srv),
		//).Error().BlockFunc(func(group *jen.Group) {
		//	group.Return().Nil()
		//})

	}))
	xerror.Panic(hello.Save())
}
