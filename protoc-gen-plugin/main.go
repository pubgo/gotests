package main

import (
	"bytes"
	"github.com/golang/protobuf/proto"
	"io/ioutil"
	"log"
	"os"
	"text/template"

	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/golang/protobuf/protoc-gen-go/generator"
)

func init() {
	generator.RegisterPlugin(new(netrpcPlugin))
}

type netrpcPlugin struct{ *generator.Generator }

func (p *netrpcPlugin) Name() string                { return "netrpc" }
func (p *netrpcPlugin) Init(g *generator.Generator) { p.Generator = g }

func (p *netrpcPlugin) GenerateImports(file *generator.FileDescriptor) {
	if len(file.Service) > 0 {
		p.genImportCode(file)
	}
}

func (p *netrpcPlugin) Generate(file *generator.FileDescriptor) {
	for _, svc := range file.Service {
		p.genServiceCode(svc)
	}
}

type ServiceSpec struct {
	ServiceName string
	MethodList  []ServiceMethodSpec
}

type ServiceMethodSpec struct {
	MethodName     string
	InputTypeName  string
	OutputTypeName string
}

func (p *netrpcPlugin) genImportCode(file *generator.FileDescriptor) {
	p.P(`import "net/rpc"`)
}

func (p *netrpcPlugin) genServiceCode(svc *descriptor.ServiceDescriptorProto) {
	spec := p.buildServiceSpec(svc)

	var buf bytes.Buffer
	t := template.Must(template.New("").Parse(tmplService))
	err := t.Execute(&buf, spec)
	if err != nil {
		log.Fatal(err)
	}

	p.P(buf.String())
}

func (p *netrpcPlugin) buildServiceSpec(svc *descriptor.ServiceDescriptorProto) *ServiceSpec {
	spec := &ServiceSpec{
		ServiceName: generator.CamelCase(svc.GetName()),
	}

	for _, m := range svc.Method {
		spec.MethodList = append(spec.MethodList, ServiceMethodSpec{
			MethodName:     generator.CamelCase(m.GetName()),
			InputTypeName:  p.TypeName(p.ObjectNamed(m.GetInputType())),
			OutputTypeName: p.TypeName(p.ObjectNamed(m.GetOutputType())),
		})
	}

	return spec
}

const tmplService = `
{{$root := .}}
type {{.ServiceName}}Interface interface {
	{{- range $_, $m := .MethodList}}
		{{$m.MethodName}}(in *{{$m.InputTypeName}}, out *{{$m.OutputTypeName}}) error
	{{- end}}
}
func Register{{.ServiceName}}(srv *rpc.Server, x {{.ServiceName}}Interface) error {
	if err := srv.RegisterName("{{.ServiceName}}", x); err != nil {
		return err
	}
	return nil
}
type {{.ServiceName}}Client struct {
	*rpc.Client
}
var _ {{.ServiceName}}Interface = (*{{.ServiceName}}Client)(nil)
func Dial{{.ServiceName}}(network, address string) (*{{.ServiceName}}Client, error) {
	c, err := rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &{{.ServiceName}}Client{Client: c}, nil
}
{{range $_, $m := .MethodList}}
func (p *{{$root.ServiceName}}Client) {{$m.MethodName}}(in *{{$m.InputTypeName}}, out *{{$m.OutputTypeName}}) error {
	return p.Client.Call("{{$root.ServiceName}}.{{$m.MethodName}}", in, out)
}
{{end}}
`

func main() {
	g := generator.New()

	data, err := ioutil.ReadAll(os.Stdin)
	if err != nil {
		g.Error(err, "reading input")
	}

	if err := proto.Unmarshal(data, g.Request); err != nil {
		g.Error(err, "parsing input proto")
	}

	if len(g.Request.FileToGenerate) == 0 {
		g.Fail("no files to generate")
	}

	g.CommandLineParameters(g.Request.GetParameter())

	g.WrapTypes()

	g.SetPackageNames()
	g.BuildTypeNameMap()

	g.GenerateAllFiles()

	data, err = proto.Marshal(g.Response)
	if err != nil {
		g.Error(err, "failed to marshal output proto")
	}
	_, err = os.Stdout.Write(data)
	if err != nil {
		g.Error(err, "failed to write output proto")
	}
}


var fileDescriptor_ecf0878b123623e2 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xbf, 0x8b, 0xd4, 0x40,
	0x14, 0x76, 0x6e, 0xf7, 0x2e, 0xee, 0x0b, 0xe2, 0x31, 0x8a, 0xc6, 0x65, 0x49, 0x96, 0xa0, 0xb0,
	0x04, 0x4c, 0x30, 0x76, 0xd7, 0x6d, 0xb0, 0x17, 0xe6, 0x8e, 0x6d, 0x2c, 0x64, 0xf6, 0x6e, 0x8c,
	0x03, 0x97, 0xcc, 0x5c, 0x32, 0x59, 0xad, 0xfd, 0x17, 0x6c, 0xec, 0xfd, 0x33, 0xc4, 0xde, 0x52,
	0xb0, 0x0f, 0xb2, 0x5a, 0xe5, 0xaf, 0x90, 0xf9, 0xb1, 0x78, 0x8a, 0x16, 0x22, 0xd7, 0xbc, 0xbc,
	0x1f, 0xdf, 0xf7, 0xbd, 0x6f, 0x1e, 0x81, 0x9b, 0xb2, 0x11, 0x4a, 0x64, 0x54, 0xf2, 0xd4, 0x64,
	0xd8, 0x53, 0xac, 0x55, 0x54, 0xf2, 0xe9, 0xc3, 0x92, 0xab, 0x97, 0xdd, 0x3a, 0x3d, 0x15, 0x55,
	0x56, 0x8a, 0x52, 0x64, 0x66, 0xbe, 0xee, 0x5e, 0x98, 0xca, 0xd2, 0x74, 0x66, 0x79, 0xd3, 0x59,
	0x29, 0x44, 0x79, 0xce, 0xb4, 0x52, 0x46, 0xeb, 0x5a, 0x28, 0xaa, 0xb8, 0xa8, 0x5b, 0x3b, 0x8d,
	0x13, 0xf0, 0x4e, 0x58, 0xab, 0x08, 0xbb, 0xc0, 0x11, 0xec, 0xf3, 0x5a, 0x76, 0x2a, 0x40, 0x73,
	0xb4, 0x98, 0x14, 0x93, 0xa1, 0x8f, 0x6c, 0x83, 0xd8, 0x4f, 0xfc, 0x1c, 0x7c, 0x8d, 0x5d, 0x4a,
	0xfe, 0x84, 0x2a, 0x8a, 0xef, 0x83, 0xb7, 0x61, 0x4d, 0xcb, 0x45, 0xed, 0x18, 0x30, 0xf4, 0xd1,
	0xc1, 0x52, 0xf2, 0x15, 0x6b, 0xc8, 0x6e, 0x84, 0x13, 0x80, 0xb6, 0xd9, 0xac, 0x1c, 0x70, 0xef,
	0x27, 0xf0, 0xd8, 0x74, 0xc9, 0xa5, 0x69, 0xfc, 0x1e, 0xc1, 0x0d, 0xb7, 0xe1, 0x69, 0xa7, 0x64,
	0xa7, 0xf0, 0x0c, 0xc6, 0xa7, 0xe2, 0x8c, 0x99, 0x05, 0xfb, 0xc5, 0xf5, 0xa1, 0x8f, 0x4c, 0x4d,
	0x4c, 0xc4, 0xf7, 0x60, 0x54, 0xb5, 0xa5, 0x13, 0xf5, 0x86, 0x3e, 0xd2, 0x25, 0xd1, 0x01, 0x3f,
	0x00, 0xaf, 0x16, 0xaf, 0x4e, 0x78, 0xc5, 0x82, 0xd1, 0x1c, 0x2d, 0x46, 0x85, 0x3f, 0xf4, 0xd1,
	0xae, 0x45, 0x76, 0x09, 0xce, 0x61, 0x7c, 0x46, 0x15, 0x0d, 0xc6, 0x73, 0xb4, 0xf0, 0xf3, 0xdb,
	0xa9, 0xbb, 0x71, 0x7a, 0xe9, 0x9d, 0x76, 0xab, 0x46, 0x11, 0x13, 0xf3, 0x0f, 0xc8, 0xde, 0x6c,
	0x29, 0x39, 0x3e, 0x06, 0xcf, 0x99, 0xc7, 0x87, 0xbf, 0x90, 0x09, 0xbb, 0x98, 0xde, 0xf9, 0x5d,
	0xce, 0x3e, 0x2a, 0x0e, 0xdf, 0x7c, 0xf9, 0xfe, 0x76, 0x2f, 0x88, 0x6f, 0x65, 0x9b, 0x47, 0x19,
	0x7b, 0x4d, 0x2b, 0x79, 0xce, 0x32, 0x77, 0xaf, 0x23, 0x94, 0xe0, 0x67, 0xe0, 0x3b, 0x51, 0xcd,
	0xfb, 0x07, 0xe1, 0xd8, 0x08, 0xcf, 0xe2, 0xbb, 0x7f, 0x10, 0xd6, 0x8c, 0x23, 0x94, 0xe4, 0x1f,
	0x11, 0x4c, 0x1c, 0x6b, 0x95, 0xff, 0xb7, 0xff, 0xfc, 0xaa, 0xfc, 0xe7, 0x7f, 0xf1, 0x5f, 0x1c,
	0x7e, 0xda, 0x86, 0xe8, 0xf3, 0x36, 0x44, 0x5f, 0xb7, 0x21, 0x7a, 0xf7, 0x2d, 0xbc, 0xb6, 0x3e,
	0x30, 0x7f, 0xf2, 0xe3, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x82, 0x28, 0xdd, 0xdf, 0x32, 0x03,
	0x00, 0x00,
}