// This code was autogenerated from proto/api.proto, do not edit.
package helloworld
import (
	"context"
	"log"
	"time"
	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	"github.com/nats-rpc/nrpc"
)
// TestApiServer is the interface that providers of the service
// TestApi should implement.
type TestApiServer interface {
	Version(ctx context.Context, req TestReq) (resp TestApiOutput, err error)
	VersionTest(ctx context.Context, req TestReq) (resp TestApiOutput, err error)
}
// TestApiHandler provides a NATS subscription handler that can serve a
// subscription using a given TestApiServer implementation.
type TestApiHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  TestApiServer
	encodings []string
}
func NewTestApiHandler(ctx context.Context, nc nrpc.NatsConn, s TestApiServer) *TestApiHandler {
	return &TestApiHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
		encodings: []string{"protobuf"},
	}
}
func NewTestApiConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s TestApiServer) *TestApiHandler {
	return &TestApiHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}
// SetEncodings sets the output encodings when using a '*Publish' function
func (h *TestApiHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}
func (h *TestApiHandler) Subject() string {
	return "helloworld.TestApi.>"
}
func (h *TestApiHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"helloworld", 0, "TestApi", 0, msg.Subject)
	if err != nil {
		log.Printf("TestApiHanlder: TestApi subject parsing failed: %v", err)
		return
	}
	request.MethodName = name
	request.SubjectTail = tail
	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Version":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("VersionHanlder: Version subject parsing failed: %v", err)
			break
		}
		var req TestReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("VersionHandler: Version request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Version(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	case "VersionTest":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("VersionTestHanlder: VersionTest subject parsing failed: %v", err)
			break
		}
		var req TestReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("VersionTestHandler: VersionTest request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.VersionTest(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	default:
		log.Printf("TestApiHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}
	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("TestApiHandler: TestApi handler failed to publish the response: %s", err)
		}
	} else {
	}
}
type TestApiClient struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}
func NewTestApiClient(nc nrpc.NatsConn) *TestApiClient {
	return &TestApiClient{
		nc:      nc,
		PkgSubject: "helloworld",
		Subject: "TestApi",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}
func (c *TestApiClient) Version(req TestReq) (resp TestApiOutput, err error) {
	subject := c.PkgSubject + "." + c.Subject + "." + "Version"
	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
func (c *TestApiClient) VersionTest(req TestReq) (resp TestApiOutput, err error) {
	subject := c.PkgSubject + "." + c.Subject + "." + "VersionTest"
	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
// TestApiV2Server is the interface that providers of the service
// TestApiV2 should implement.
type TestApiV2Server interface {
	Version(ctx context.Context, req TestReq) (resp TestApiOutput, err error)
	VersionTest(ctx context.Context, req TestReq) (resp TestApiOutput, err error)
}
// TestApiV2Handler provides a NATS subscription handler that can serve a
// subscription using a given TestApiV2Server implementation.
type TestApiV2Handler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  TestApiV2Server
	encodings []string
}
func NewTestApiV2Handler(ctx context.Context, nc nrpc.NatsConn, s TestApiV2Server) *TestApiV2Handler {
	return &TestApiV2Handler{
		ctx:    ctx,
		nc:     nc,
		server: s,
		encodings: []string{"protobuf"},
	}
}
func NewTestApiV2ConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s TestApiV2Server) *TestApiV2Handler {
	return &TestApiV2Handler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}
// SetEncodings sets the output encodings when using a '*Publish' function
func (h *TestApiV2Handler) SetEncodings(encodings []string) {
	h.encodings = encodings
}
func (h *TestApiV2Handler) Subject() string {
	return "helloworld.TestApiV2.>"
}
func (h *TestApiV2Handler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"helloworld", 0, "TestApiV2", 0, msg.Subject)
	if err != nil {
		log.Printf("TestApiV2Hanlder: TestApiV2 subject parsing failed: %v", err)
		return
	}
	request.MethodName = name
	request.SubjectTail = tail
	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Version":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("VersionHanlder: Version subject parsing failed: %v", err)
			break
		}
		var req TestReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("VersionHandler: Version request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Version(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	case "VersionTest":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("VersionTestHanlder: VersionTest subject parsing failed: %v", err)
			break
		}
		var req TestReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("VersionTestHandler: VersionTest request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.VersionTest(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	default:
		log.Printf("TestApiV2Handler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}
	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("TestApiV2Handler: TestApiV2 handler failed to publish the response: %s", err)
		}
	} else {
	}
}
type TestApiV2Client struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}
func NewTestApiV2Client(nc nrpc.NatsConn) *TestApiV2Client {
	return &TestApiV2Client{
		nc:      nc,
		PkgSubject: "helloworld",
		Subject: "TestApiV2",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}
func (c *TestApiV2Client) Version(req TestReq) (resp TestApiOutput, err error) {
	subject := c.PkgSubject + "." + c.Subject + "." + "Version"
	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
func (c *TestApiV2Client) VersionTest(req TestReq) (resp TestApiOutput, err error) {
	subject := c.PkgSubject + "." + c.Subject + "." + "VersionTest"
	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	pkgSubject string
	TestApi *TestApiClient
	TestApiV2 *TestApiV2Client
}
func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
		pkgSubject: "helloworld",
	}
	c.TestApi = NewTestApiClient(nc)
	c.TestApiV2 = NewTestApiV2Client(nc)
	return &c
}
func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.TestApi != nil {
		c.TestApi.Encoding = encoding
	}
	if c.TestApiV2 != nil {
		c.TestApiV2.Encoding = encoding
	}
}
func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.TestApi != nil {
		c.TestApi.Timeout = t
	}
	if c.TestApiV2 != nil {
		c.TestApiV2.Timeout = t
	}
}